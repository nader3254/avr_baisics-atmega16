
LED drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000426  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000107a  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000813  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000853  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008eb  00000000  00000000  00002ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000033d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  64:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <out>:
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
  6c:	4a e0       	ldi	r20, 0x0A	; 10
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	87 c0       	rjmp	.+270    	; 0x180 <out+0x114>
  72:	9a 01       	movw	r18, r20
  74:	42 31       	cpi	r20, 0x12	; 18
  76:	51 05       	cpc	r21, r1
  78:	e8 f4       	brcc	.+58     	; 0xb4 <out+0x48>
  7a:	e8 2f       	mov	r30, r24
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	4e 17       	cp	r20, r30
  80:	5f 07       	cpc	r21, r31
  82:	c1 f4       	brne	.+48     	; 0xb4 <out+0x48>
  84:	4a 50       	subi	r20, 0x0A	; 10
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <out+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	4a 95       	dec	r20
  94:	e2 f7       	brpl	.-8      	; 0x8e <out+0x22>
  96:	28 2b       	or	r18, r24
  98:	2a bb       	out	0x1a, r18	; 26
  9a:	68 36       	cpi	r22, 0x68	; 104
  9c:	11 f0       	breq	.+4      	; 0xa2 <out+0x36>
  9e:	68 34       	cpi	r22, 0x48	; 72
  a0:	21 f4       	brne	.+8      	; 0xaa <out+0x3e>
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	89 2b       	or	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret
  aa:	9b b3       	in	r25, 0x1b	; 27
  ac:	80 95       	com	r24
  ae:	89 23       	and	r24, r25
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	08 95       	ret
  b4:	f9 01       	movw	r30, r18
  b6:	72 97       	sbiw	r30, 0x12	; 18
  b8:	3a 97       	sbiw	r30, 0x0a	; 10
  ba:	e8 f4       	brcc	.+58     	; 0xf6 <out+0x8a>
  bc:	e8 2f       	mov	r30, r24
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	4e 17       	cp	r20, r30
  c2:	5f 07       	cpc	r21, r31
  c4:	c1 f4       	brne	.+48     	; 0xf6 <out+0x8a>
  c6:	44 51       	subi	r20, 0x14	; 20
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <out+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	4a 95       	dec	r20
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <out+0x64>
  d8:	28 2b       	or	r18, r24
  da:	27 bb       	out	0x17, r18	; 23
  dc:	68 36       	cpi	r22, 0x68	; 104
  de:	11 f0       	breq	.+4      	; 0xe4 <out+0x78>
  e0:	68 34       	cpi	r22, 0x48	; 72
  e2:	21 f4       	brne	.+8      	; 0xec <out+0x80>
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	89 2b       	or	r24, r25
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret
  ec:	98 b3       	in	r25, 0x18	; 24
  ee:	80 95       	com	r24
  f0:	89 23       	and	r24, r25
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	f9 01       	movw	r30, r18
  f8:	7c 97       	sbiw	r30, 0x1c	; 28
  fa:	3a 97       	sbiw	r30, 0x0a	; 10
  fc:	e8 f4       	brcc	.+58     	; 0x138 <out+0xcc>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	4e 17       	cp	r20, r30
 104:	5f 07       	cpc	r21, r31
 106:	c1 f4       	brne	.+48     	; 0x138 <out+0xcc>
 108:	4e 51       	subi	r20, 0x1E	; 30
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <out+0xaa>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	4a 95       	dec	r20
 118:	e2 f7       	brpl	.-8      	; 0x112 <out+0xa6>
 11a:	28 2b       	or	r18, r24
 11c:	24 bb       	out	0x14, r18	; 20
 11e:	68 36       	cpi	r22, 0x68	; 104
 120:	11 f0       	breq	.+4      	; 0x126 <out+0xba>
 122:	68 34       	cpi	r22, 0x48	; 72
 124:	21 f4       	brne	.+8      	; 0x12e <out+0xc2>
 126:	95 b3       	in	r25, 0x15	; 21
 128:	89 2b       	or	r24, r25
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	08 95       	ret
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	80 95       	com	r24
 132:	89 23       	and	r24, r25
 134:	85 bb       	out	0x15, r24	; 21
 136:	08 95       	ret
 138:	26 52       	subi	r18, 0x26	; 38
 13a:	31 09       	sbc	r19, r1
 13c:	2a 30       	cpi	r18, 0x0A	; 10
 13e:	31 05       	cpc	r19, r1
 140:	e8 f4       	brcc	.+58     	; 0x17c <out+0x110>
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	42 17       	cp	r20, r18
 148:	53 07       	cpc	r21, r19
 14a:	c1 f4       	brne	.+48     	; 0x17c <out+0x110>
 14c:	48 52       	subi	r20, 0x28	; 40
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <out+0xee>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <out+0xea>
 15e:	28 2b       	or	r18, r24
 160:	21 bb       	out	0x11, r18	; 17
 162:	68 36       	cpi	r22, 0x68	; 104
 164:	11 f0       	breq	.+4      	; 0x16a <out+0xfe>
 166:	68 34       	cpi	r22, 0x48	; 72
 168:	21 f4       	brne	.+8      	; 0x172 <out+0x106>
 16a:	92 b3       	in	r25, 0x12	; 18
 16c:	89 2b       	or	r24, r25
 16e:	82 bb       	out	0x12, r24	; 18
 170:	08 95       	ret
 172:	92 b3       	in	r25, 0x12	; 18
 174:	80 95       	com	r24
 176:	89 23       	and	r24, r25
 178:	82 bb       	out	0x12, r24	; 18
 17a:	08 95       	ret
 17c:	4f 5f       	subi	r20, 0xFF	; 255
 17e:	5f 4f       	sbci	r21, 0xFF	; 255
 180:	40 33       	cpi	r20, 0x30	; 48
 182:	51 05       	cpc	r21, r1
 184:	0c f4       	brge	.+2      	; 0x188 <out+0x11c>
 186:	75 cf       	rjmp	.-278    	; 0x72 <out+0x6>
 188:	08 95       	ret

0000018a <toggle>:
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	5b c0       	rjmp	.+182    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
	{
		if (i>=0&&i<18)//for port A
 190:	9a 01       	movw	r18, r20
 192:	42 31       	cpi	r20, 0x12	; 18
 194:	51 05       	cpc	r21, r1
 196:	88 f4       	brcc	.+34     	; 0x1ba <toggle+0x30>
		{if (i==a3){uint8_t tmp =i-10;PORTA ^=(1<<tmp);}}
 198:	68 2f       	mov	r22, r24
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	46 17       	cp	r20, r22
 19e:	57 07       	cpc	r21, r23
 1a0:	61 f4       	brne	.+24     	; 0x1ba <toggle+0x30>
 1a2:	e6 ef       	ldi	r30, 0xF6	; 246
 1a4:	e4 0f       	add	r30, r20
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <toggle+0x28>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	ea 95       	dec	r30
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <toggle+0x24>
 1b6:	69 27       	eor	r22, r25
 1b8:	6b bb       	out	0x1b, r22	; 27
		if (i>=18&&i<28)//for port B
 1ba:	b9 01       	movw	r22, r18
 1bc:	62 51       	subi	r22, 0x12	; 18
 1be:	71 09       	sbc	r23, r1
 1c0:	6a 30       	cpi	r22, 0x0A	; 10
 1c2:	71 05       	cpc	r23, r1
 1c4:	88 f4       	brcc	.+34     	; 0x1e8 <toggle+0x5e>
		{if (i==a3){uint8_t tmp =i-20;PORTB ^=(1<<tmp);}}
 1c6:	68 2f       	mov	r22, r24
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	46 17       	cp	r20, r22
 1cc:	57 07       	cpc	r21, r23
 1ce:	61 f4       	brne	.+24     	; 0x1e8 <toggle+0x5e>
 1d0:	ec ee       	ldi	r30, 0xEC	; 236
 1d2:	e4 0f       	add	r30, r20
 1d4:	98 b3       	in	r25, 0x18	; 24
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <toggle+0x56>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	ea 95       	dec	r30
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <toggle+0x52>
 1e4:	69 27       	eor	r22, r25
 1e6:	68 bb       	out	0x18, r22	; 24
		if (i>=28&&i<38)//for port C
 1e8:	b9 01       	movw	r22, r18
 1ea:	6c 51       	subi	r22, 0x1C	; 28
 1ec:	71 09       	sbc	r23, r1
 1ee:	6a 30       	cpi	r22, 0x0A	; 10
 1f0:	71 05       	cpc	r23, r1
 1f2:	88 f4       	brcc	.+34     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
 1f4:	68 2f       	mov	r22, r24
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	46 17       	cp	r20, r22
 1fa:	57 07       	cpc	r21, r23
 1fc:	61 f4       	brne	.+24     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 1fe:	e2 ee       	ldi	r30, 0xE2	; 226
 200:	e4 0f       	add	r30, r20
 202:	95 b3       	in	r25, 0x15	; 21
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	ea 95       	dec	r30
 210:	e2 f7       	brpl	.-8      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 212:	69 27       	eor	r22, r25
 214:	65 bb       	out	0x15, r22	; 21
		if (i>=38&&i<48)//for port D
 216:	26 52       	subi	r18, 0x26	; 38
 218:	31 09       	sbc	r19, r1
 21a:	2a 30       	cpi	r18, 0x0A	; 10
 21c:	31 05       	cpc	r19, r1
 21e:	88 f4       	brcc	.+34     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	42 17       	cp	r20, r18
 226:	53 07       	cpc	r21, r19
 228:	61 f4       	brne	.+24     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 22a:	68 ed       	ldi	r22, 0xD8	; 216
 22c:	64 0f       	add	r22, r20
 22e:	92 b3       	in	r25, 0x12	; 18
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 23e:	29 27       	eor	r18, r25
 240:	22 bb       	out	0x12, r18	; 18
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	5f 4f       	sbci	r21, 0xFF	; 255
 246:	40 33       	cpi	r20, 0x30	; 48
 248:	51 05       	cpc	r21, r1
 24a:	0c f4       	brge	.+2      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24c:	a1 cf       	rjmp	.-190    	; 0x190 <toggle+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
	}
 24e:	08 95       	ret

00000250 <led_on>:
#include "LED.h"
void led_on(uint8_t x)
{
	out(x,'h');
 250:	68 e6       	ldi	r22, 0x68	; 104
 252:	0e 94 36 00 	call	0x6c	; 0x6c <out>
 256:	08 95       	ret

00000258 <led_off>:
}
void led_off(uint8_t x0)
{
	out(x0,'l');
 258:	6c e6       	ldi	r22, 0x6C	; 108
 25a:	0e 94 36 00 	call	0x6c	; 0x6c <out>
 25e:	08 95       	ret

00000260 <led_toggle>:
}
void led_toggle(uint8_t x1)
{
	toggle(x1);
 260:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle>
 264:	08 95       	ret

00000266 <Blink_led>:
}
void Blink_led(uint8_t x2,uint32_t y)
{
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
 272:	6a 01       	movw	r12, r20
 274:	7b 01       	movw	r14, r22
	out(x2,'h');
 276:	68 e6       	ldi	r22, 0x68	; 104
 278:	0e 94 36 00 	call	0x6c	; 0x6c <out>
	for (int i=0;i<y;i++)
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	07 c0       	rjmp	.+14     	; 0x290 <Blink_led+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	e9 ef       	ldi	r30, 0xF9	; 249
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Blink_led+0x20>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Blink_led+0x26>
 28c:	00 00       	nop
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	ac 01       	movw	r20, r24
 292:	09 2e       	mov	r0, r25
 294:	00 0c       	add	r0, r0
 296:	66 0b       	sbc	r22, r22
 298:	77 0b       	sbc	r23, r23
 29a:	4c 15       	cp	r20, r12
 29c:	5d 05       	cpc	r21, r13
 29e:	6e 05       	cpc	r22, r14
 2a0:	7f 05       	cpc	r23, r15
 2a2:	78 f3       	brcs	.-34     	; 0x282 <Blink_led+0x1c>
	{
		_delay_ms(1);
	}
	out(x2,'l');
 2a4:	6c e6       	ldi	r22, 0x6C	; 108
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 36 00 	call	0x6c	; 0x6c <out>
		for (int i=0;i<y;i++)
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <Blink_led+0x5a>
 2b2:	e9 ef       	ldi	r30, 0xF9	; 249
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Blink_led+0x50>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Blink_led+0x56>
 2bc:	00 00       	nop
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	ac 01       	movw	r20, r24
 2c2:	09 2e       	mov	r0, r25
 2c4:	00 0c       	add	r0, r0
 2c6:	66 0b       	sbc	r22, r22
 2c8:	77 0b       	sbc	r23, r23
 2ca:	4c 15       	cp	r20, r12
 2cc:	5d 05       	cpc	r21, r13
 2ce:	6e 05       	cpc	r22, r14
 2d0:	7f 05       	cpc	r23, r15
 2d2:	78 f3       	brcs	.-34     	; 0x2b2 <Blink_led+0x4c>
		{
			_delay_ms(1);
		}
 2d4:	cf 91       	pop	r28
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	08 95       	ret

000002e0 <main>:
#define led8 A7
int main(void)
{
   
    while (1) 
    {	led_on(led1);led_on(led2);led_on(led3);led_on(led4);
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 2e6:	8b e0       	ldi	r24, 0x0B	; 11
 2e8:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 2f2:	8d e0       	ldi	r24, 0x0D	; 13
 2f4:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
	    led_on(led5);led_on(led6);led_on(led7);led_on(led8);
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 2fe:	8f e0       	ldi	r24, 0x0F	; 15
 300:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 30a:	81 e1       	ldi	r24, 0x11	; 17
 30c:	0e 94 28 01 	call	0x250	; 0x250 <led_on>
 310:	2f e7       	ldi	r18, 0x7F	; 127
 312:	8a e1       	ldi	r24, 0x1A	; 26
 314:	96 e0       	ldi	r25, 0x06	; 6
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x36>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x40>
 320:	00 00       	nop
	    _delay_ms(2000);
	    led_off(led1);led_off(led2);led_off(led3);led_off(led4);
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 328:	8b e0       	ldi	r24, 0x0B	; 11
 32a:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
	    led_off(led5);led_off(led6);led_off(led7);led_off(led8);
 33a:	8e e0       	ldi	r24, 0x0E	; 14
 33c:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 34c:	81 e1       	ldi	r24, 0x11	; 17
 34e:	0e 94 2c 01 	call	0x258	; 0x258 <led_off>
 352:	2f e7       	ldi	r18, 0x7F	; 127
 354:	8a e1       	ldi	r24, 0x1A	; 26
 356:	96 e0       	ldi	r25, 0x06	; 6
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x78>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x82>
 362:	00 00       	nop
	    _delay_ms(2000);
	    led_toggle(led1);led_toggle(led2);led_toggle(led3);led_toggle(led4);
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 36a:	8b e0       	ldi	r24, 0x0B	; 11
 36c:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 370:	8c e0       	ldi	r24, 0x0C	; 12
 372:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
	    led_toggle(led5);led_toggle(led6);led_toggle(led7);led_toggle(led8);
 37c:	8e e0       	ldi	r24, 0x0E	; 14
 37e:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 382:	8f e0       	ldi	r24, 0x0F	; 15
 384:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 388:	80 e1       	ldi	r24, 0x10	; 16
 38a:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 38e:	81 e1       	ldi	r24, 0x11	; 17
 390:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 394:	2f e7       	ldi	r18, 0x7F	; 127
 396:	8a e1       	ldi	r24, 0x1A	; 26
 398:	96 e0       	ldi	r25, 0x06	; 6
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0xba>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0xc4>
 3a4:	00 00       	nop
	    _delay_ms(2000);
	    led_toggle(led1);led_toggle(led2);led_toggle(led3);led_toggle(led4);
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3ac:	8b e0       	ldi	r24, 0x0B	; 11
 3ae:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3b8:	8d e0       	ldi	r24, 0x0D	; 13
 3ba:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
	    led_toggle(led5);led_toggle(led6);led_toggle(led7);led_toggle(led8);
 3be:	8e e0       	ldi	r24, 0x0E	; 14
 3c0:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3ca:	80 e1       	ldi	r24, 0x10	; 16
 3cc:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3d0:	81 e1       	ldi	r24, 0x11	; 17
 3d2:	0e 94 30 01 	call	0x260	; 0x260 <led_toggle>
 3d6:	2f e7       	ldi	r18, 0x7F	; 127
 3d8:	8a e1       	ldi	r24, 0x1A	; 26
 3da:	96 e0       	ldi	r25, 0x06	; 6
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0xfc>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x106>
 3e6:	00 00       	nop
	    _delay_ms(2000);
	
		
		Blink_led(led8,500);Blink_led(led1,500);Blink_led(led4,500);Blink_led(led6,500);
 3e8:	44 ef       	ldi	r20, 0xF4	; 244
 3ea:	51 e0       	ldi	r21, 0x01	; 1
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	81 e1       	ldi	r24, 0x11	; 17
 3f2:	0e 94 33 01 	call	0x266	; 0x266 <Blink_led>
 3f6:	44 ef       	ldi	r20, 0xF4	; 244
 3f8:	51 e0       	ldi	r21, 0x01	; 1
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	0e 94 33 01 	call	0x266	; 0x266 <Blink_led>
 404:	44 ef       	ldi	r20, 0xF4	; 244
 406:	51 e0       	ldi	r21, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	0e 94 33 01 	call	0x266	; 0x266 <Blink_led>
 412:	44 ef       	ldi	r20, 0xF4	; 244
 414:	51 e0       	ldi	r21, 0x01	; 1
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	0e 94 33 01 	call	0x266	; 0x266 <Blink_led>
 420:	5f cf       	rjmp	.-322    	; 0x2e0 <main>

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
