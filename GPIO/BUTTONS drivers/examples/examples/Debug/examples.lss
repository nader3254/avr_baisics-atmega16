
examples.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ada  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068f  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000602  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 19 01 	call	0x232	; 0x232 <main>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <read_button>:
#include "BUTTON.h"

uint8_t read_button(uint8_t a)
{
   return	read(a);
  6c:	0e 94 a3 00 	call	0x146	; 0x146 <read>
}
  70:	08 95       	ret

00000072 <set_button>:
void set_button(uint8_t x)
{
	inp(x);
  72:	0e 94 3c 00 	call	0x78	; 0x78 <inp>
  76:	08 95       	ret

00000078 <inp>:
		if (i>=28&&i<38)//for port C
		{if (i==a1){uint8_t tmp =i-30;DDRC &=~(1<<tmp);PORTC |=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
  78:	4a e0       	ldi	r20, 0x0A	; 10
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	5f c0       	rjmp	.+190    	; 0x13c <inp+0xc4>
  7e:	9a 01       	movw	r18, r20
  80:	42 31       	cpi	r20, 0x12	; 18
  82:	51 05       	cpc	r21, r1
  84:	90 f4       	brcc	.+36     	; 0xaa <inp+0x32>
  86:	68 2f       	mov	r22, r24
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	46 17       	cp	r20, r22
  8c:	57 07       	cpc	r21, r23
  8e:	69 f4       	brne	.+26     	; 0xaa <inp+0x32>
  90:	e6 ef       	ldi	r30, 0xF6	; 246
  92:	e4 0f       	add	r30, r20
  94:	9a b3       	in	r25, 0x1a	; 26
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <inp+0x28>
  9c:	66 0f       	add	r22, r22
  9e:	77 1f       	adc	r23, r23
  a0:	ea 95       	dec	r30
  a2:	e2 f7       	brpl	.-8      	; 0x9c <inp+0x24>
  a4:	60 95       	com	r22
  a6:	69 23       	and	r22, r25
  a8:	6a bb       	out	0x1a, r22	; 26
  aa:	b9 01       	movw	r22, r18
  ac:	62 51       	subi	r22, 0x12	; 18
  ae:	71 09       	sbc	r23, r1
  b0:	6a 30       	cpi	r22, 0x0A	; 10
  b2:	71 05       	cpc	r23, r1
  b4:	90 f4       	brcc	.+36     	; 0xda <inp+0x62>
  b6:	68 2f       	mov	r22, r24
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	46 17       	cp	r20, r22
  bc:	57 07       	cpc	r21, r23
  be:	69 f4       	brne	.+26     	; 0xda <inp+0x62>
  c0:	ec ee       	ldi	r30, 0xEC	; 236
  c2:	e4 0f       	add	r30, r20
  c4:	97 b3       	in	r25, 0x17	; 23
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <inp+0x58>
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	ea 95       	dec	r30
  d2:	e2 f7       	brpl	.-8      	; 0xcc <inp+0x54>
  d4:	60 95       	com	r22
  d6:	69 23       	and	r22, r25
  d8:	67 bb       	out	0x17, r22	; 23
  da:	b9 01       	movw	r22, r18
  dc:	6c 51       	subi	r22, 0x1C	; 28
  de:	71 09       	sbc	r23, r1
  e0:	6a 30       	cpi	r22, 0x0A	; 10
  e2:	71 05       	cpc	r23, r1
  e4:	90 f4       	brcc	.+36     	; 0x10a <inp+0x92>
  e6:	68 2f       	mov	r22, r24
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	46 17       	cp	r20, r22
  ec:	57 07       	cpc	r21, r23
  ee:	69 f4       	brne	.+26     	; 0x10a <inp+0x92>
  f0:	e2 ee       	ldi	r30, 0xE2	; 226
  f2:	e4 0f       	add	r30, r20
  f4:	94 b3       	in	r25, 0x14	; 20
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <inp+0x88>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	ea 95       	dec	r30
 102:	e2 f7       	brpl	.-8      	; 0xfc <inp+0x84>
 104:	60 95       	com	r22
 106:	69 23       	and	r22, r25
 108:	64 bb       	out	0x14, r22	; 20
 10a:	26 52       	subi	r18, 0x26	; 38
 10c:	31 09       	sbc	r19, r1
 10e:	2a 30       	cpi	r18, 0x0A	; 10
 110:	31 05       	cpc	r19, r1
 112:	90 f4       	brcc	.+36     	; 0x138 <inp+0xc0>
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	42 17       	cp	r20, r18
 11a:	53 07       	cpc	r21, r19
 11c:	69 f4       	brne	.+26     	; 0x138 <inp+0xc0>
 11e:	68 ed       	ldi	r22, 0xD8	; 216
 120:	64 0f       	add	r22, r20
 122:	91 b3       	in	r25, 0x11	; 17
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <inp+0xb6>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <inp+0xb2>
 132:	20 95       	com	r18
 134:	29 23       	and	r18, r25
 136:	21 bb       	out	0x11, r18	; 17
 138:	4f 5f       	subi	r20, 0xFF	; 255
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	40 33       	cpi	r20, 0x30	; 48
 13e:	51 05       	cpc	r21, r1
 140:	0c f4       	brge	.+2      	; 0x144 <inp+0xcc>
 142:	9d cf       	rjmp	.-198    	; 0x7e <inp+0x6>
 144:	08 95       	ret

00000146 <read>:
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	69 c0       	rjmp	.+210    	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		if (i>=0&&i<18)//for port A
 14c:	9a 01       	movw	r18, r20
 14e:	42 31       	cpi	r20, 0x12	; 18
 150:	51 05       	cpc	r21, r1
 152:	98 f4       	brcc	.+38     	; 0x17a <read+0x34>
		{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
 154:	68 2f       	mov	r22, r24
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	46 17       	cp	r20, r22
 15a:	57 07       	cpc	r21, r23
 15c:	71 f4       	brne	.+28     	; 0x17a <read+0x34>
 15e:	4a 50       	subi	r20, 0x0A	; 10
 160:	89 b3       	in	r24, 0x19	; 25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <read+0x24>
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	4a 95       	dec	r20
 16c:	e2 f7       	brpl	.-8      	; 0x166 <read+0x20>
 16e:	9c 01       	movw	r18, r24
 170:	21 70       	andi	r18, 0x01	; 1
 172:	33 27       	eor	r19, r19
 174:	80 fd       	sbrc	r24, 0
 176:	58 c0       	rjmp	.+176    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 178:	59 c0       	rjmp	.+178    	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		if (i>=18&&i<28)//for port B
 17a:	b9 01       	movw	r22, r18
 17c:	62 51       	subi	r22, 0x12	; 18
 17e:	71 09       	sbc	r23, r1
 180:	6a 30       	cpi	r22, 0x0A	; 10
 182:	71 05       	cpc	r23, r1
 184:	a8 f4       	brcc	.+42     	; 0x1b0 <read+0x6a>
		{if (i==a2){uint8_t tmp =i-20;if ((PINB & (1<<tmp))){return 1;} else{return 0;}}}
 186:	68 2f       	mov	r22, r24
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	46 17       	cp	r20, r22
 18c:	57 07       	cpc	r21, r23
 18e:	81 f4       	brne	.+32     	; 0x1b0 <read+0x6a>
 190:	44 51       	subi	r20, 0x14	; 20
 192:	86 b3       	in	r24, 0x16	; 22
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <read+0x56>
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	4a 95       	dec	r20
 19e:	e2 f7       	brpl	.-8      	; 0x198 <read+0x52>
 1a0:	9c 01       	movw	r18, r24
 1a2:	21 70       	andi	r18, 0x01	; 1
 1a4:	33 27       	eor	r19, r19
 1a6:	80 ff       	sbrs	r24, 0
 1a8:	41 c0       	rjmp	.+130    	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	3e c0       	rjmp	.+124    	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		if (i>=28&&i<38)//for port C
 1b0:	b9 01       	movw	r22, r18
 1b2:	6c 51       	subi	r22, 0x1C	; 28
 1b4:	71 09       	sbc	r23, r1
 1b6:	6a 30       	cpi	r22, 0x0A	; 10
 1b8:	71 05       	cpc	r23, r1
 1ba:	a8 f4       	brcc	.+42     	; 0x1e6 <read+0xa0>
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
 1bc:	68 2f       	mov	r22, r24
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	46 17       	cp	r20, r22
 1c2:	57 07       	cpc	r21, r23
 1c4:	81 f4       	brne	.+32     	; 0x1e6 <read+0xa0>
 1c6:	4e 51       	subi	r20, 0x1E	; 30
 1c8:	83 b3       	in	r24, 0x13	; 19
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <read+0x8c>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <read+0x88>
 1d6:	9c 01       	movw	r18, r24
 1d8:	21 70       	andi	r18, 0x01	; 1
 1da:	33 27       	eor	r19, r19
 1dc:	80 ff       	sbrs	r24, 0
 1de:	26 c0       	rjmp	.+76     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	23 c0       	rjmp	.+70     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		if (i>=38&&i<48)//for port D
 1e6:	26 52       	subi	r18, 0x26	; 38
 1e8:	31 09       	sbc	r19, r1
 1ea:	2a 30       	cpi	r18, 0x0A	; 10
 1ec:	31 05       	cpc	r19, r1
 1ee:	a8 f4       	brcc	.+42     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	42 17       	cp	r20, r18
 1f6:	53 07       	cpc	r21, r19
 1f8:	81 f4       	brne	.+32     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 1fa:	48 52       	subi	r20, 0x28	; 40
 1fc:	80 b3       	in	r24, 0x10	; 16
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	4a 95       	dec	r20
 208:	e2 f7       	brpl	.-8      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 20a:	9c 01       	movw	r18, r24
 20c:	21 70       	andi	r18, 0x01	; 1
 20e:	33 27       	eor	r19, r19
 210:	80 ff       	sbrs	r24, 0
 212:	0c c0       	rjmp	.+24     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	09 c0       	rjmp	.+18     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
 21a:	4f 5f       	subi	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	40 33       	cpi	r20, 0x30	; 48
 220:	51 05       	cpc	r21, r1
 222:	0c f4       	brge	.+2      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 224:	93 cf       	rjmp	.-218    	; 0x14c <read+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
 226:	08 95       	ret
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
	{
		if (i>=0&&i<18)//for port A
		{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	82 2f       	mov	r24, r18
 22e:	93 2f       	mov	r25, r19
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
 230:	08 95       	ret

00000232 <main>:
 #include <avr/io.h>
#include "BUTTON.h"

int main(void)
{
	set_button(A3);
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	0e 94 39 00 	call	0x72	; 0x72 <set_button>
    /* Replace with your application code */
    while (1) 
    {
		if (read_button(A3))
 238:	8d e0       	ldi	r24, 0x0D	; 13
 23a:	0e 94 36 00 	call	0x6c	; 0x6c <read_button>
 23e:	88 23       	and	r24, r24
 240:	19 f0       	breq	.+6      	; 0x248 <main+0x16>
		{
			PORTD=0x06;
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	82 bb       	out	0x12, r24	; 18
 246:	f8 cf       	rjmp	.-16     	; 0x238 <main+0x6>
		} 
		else
		{
			PORTD=0x0;
 248:	12 ba       	out	0x12, r1	; 18
 24a:	f6 cf       	rjmp	.-20     	; 0x238 <main+0x6>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
